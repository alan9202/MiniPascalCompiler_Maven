
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Apr 11 11:47:12 CDT 2018
//----------------------------------------------------

package com.own.develop.compiler;

import java.io.File;
import java.io.FileReader;

import org.apache.log4j.Logger;

import com.own.develop.compiler.expressions.*;
import com.own.develop.compiler.statements.*;

/** CUP v0.10k generated parser.
  * @version Wed Apr 11 11:47:12 CDT 2018
  */
public class SintacticAnalyzer extends java_cup.runtime.lr_parser {
    
    final static Logger logger = Logger.getLogger(SintacticAnalyzer.class);

  /** Default constructor. */
  public SintacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\003\005\000\002\002\004\000\002\004" +
    "\004\000\002\005\004\000\002\006\006\000\002\006\007" +
    "\000\002\007\006\000\002\010\003\000\002\010\004\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\006\000\002\014\011\000\002\013\013\000\002\015\007" +
    "\000\002\016\007\000\002\017\004\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\003\000\002\021\003\000\002\022" +
    "\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\004\004\001\002\000\004\037\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\005\114\001\002\000\030\005\uffe4\007\uffe4\010" +
    "\uffe4\013\uffe4\015\uffe4\022\uffe4\030\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\001\002\000\004\037\010\001\002\000" +
    "\004\002\001\001\002\000\004\007\110\001\002\000\004" +
    "\011\015\001\002\000\016\014\022\021\031\025\027\026" +
    "\023\031\025\037\010\001\002\000\004\002\ufffe\001\002" +
    "\000\026\012\ufff7\014\ufff7\020\ufff7\021\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\031\ufff7\037\ufff7\001\002\000\026" +
    "\012\ufff6\014\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\031\ufff6\037\ufff6\001\002\000\026\012\ufff4" +
    "\014\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\031\ufff4\037\ufff4\001\002\000\004\037\010\001\002" +
    "\000\004\027\074\001\002\000\026\012\ufff8\014\ufff8\020" +
    "\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\031\ufff8" +
    "\037\ufff8\001\002\000\004\010\073\001\002\000\026\012" +
    "\ufff3\014\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\031\ufff3\037\ufff3\001\002\000\004\027\067\001" +
    "\002\000\004\012\065\001\002\000\010\027\041\036\042" +
    "\037\010\001\002\000\004\013\036\001\002\000\026\012" +
    "\ufffa\014\022\020\ufffa\021\031\023\ufffa\024\ufffa\025\027" +
    "\026\023\031\025\037\010\001\002\000\026\012\ufff5\014" +
    "\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\031\ufff5\037\ufff5\001\002\000\012\012\ufff9\020\ufff9\023" +
    "\ufff9\024\ufff9\001\002\000\010\027\041\036\042\037\010" +
    "\001\002\000\020\010\uffe6\022\uffe6\030\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\001\002\000\020\010\uffe7\022\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002\000" +
    "\010\027\041\036\042\037\010\001\002\000\024\010\uffe5" +
    "\016\uffe5\017\uffe5\022\uffe5\030\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\001\002\000\014\010\047\032\045\033\050" +
    "\034\044\035\046\001\002\000\010\027\041\036\042\037" +
    "\010\001\002\000\010\027\041\036\042\037\010\001\002" +
    "\000\010\027\041\036\042\037\010\001\002\000\026\012" +
    "\ufff2\014\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\031\ufff2\037\ufff2\001\002\000\010\027\041\036" +
    "\042\037\010\001\002\000\020\010\uffeb\022\uffeb\030\uffeb" +
    "\032\uffeb\033\uffeb\034\044\035\046\001\002\000\020\010" +
    "\uffe9\022\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\001\002\000\020\010\uffec\022\uffec\030\uffec\032\uffec\033" +
    "\uffec\034\044\035\046\001\002\000\020\010\uffea\022\uffea" +
    "\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea\001\002\000" +
    "\014\030\056\032\045\033\050\034\044\035\046\001\002" +
    "\000\020\010\uffe8\022\uffe8\030\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\001\002\000\014\022\060\032\045\033\050" +
    "\034\044\035\046\001\002\000\016\014\022\021\031\025" +
    "\027\026\023\031\025\037\010\001\002\000\004\023\062" +
    "\001\002\000\016\014\022\021\031\025\027\026\023\031" +
    "\025\037\010\001\002\000\004\024\064\001\002\000\026" +
    "\012\ufff1\014\ufff1\020\ufff1\021\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\031\ufff1\037\ufff1\001\002\000\004\010\066" +
    "\001\002\000\004\002\ufffb\001\002\000\004\037\010\001" +
    "\002\000\004\030\071\001\002\000\004\010\072\001\002" +
    "\000\026\012\uffef\014\uffef\020\uffef\021\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\031\uffef\037\uffef\001\002\000\026" +
    "\012\uffed\014\uffed\020\uffed\021\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\031\uffed\037\uffed\001\002\000\004\037\010" +
    "\001\002\000\004\030\076\001\002\000\004\010\077\001" +
    "\002\000\026\012\uffee\014\uffee\020\uffee\021\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\031\uffee\037\uffee\001\002\000" +
    "\004\015\101\001\002\000\004\036\042\001\002\000\004" +
    "\016\103\001\002\000\004\036\042\001\002\000\004\017" +
    "\105\001\002\000\016\014\022\021\031\025\027\026\023" +
    "\031\025\037\010\001\002\000\004\020\107\001\002\000" +
    "\026\012\ufff0\014\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\031\ufff0\037\ufff0\001\002\000\004\006" +
    "\111\001\002\000\004\010\112\001\002\000\006\011\ufffd" +
    "\037\010\001\002\000\004\011\ufffc\001\002\000\004\037" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\003\004\001\001\000\006\004\010\020" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\011\006\013\020" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\015\001\001\000\024\010\027\011\032\012\023\013" +
    "\017\014\033\015\020\016\025\017\016\020\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\036\021\056" +
    "\022\037\001\001\000\002\001\001\000\024\010\034\011" +
    "\032\012\023\013\017\014\033\015\020\016\025\017\016" +
    "\020\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\036\021\042\022\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\036\021\054\022\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\036" +
    "\021\053\022\037\001\001\000\010\020\036\021\052\022" +
    "\037\001\001\000\010\020\036\021\051\022\037\001\001" +
    "\000\002\001\001\000\010\020\036\021\050\022\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\060\011\032\012\023\013\017" +
    "\014\033\015\020\016\025\017\016\020\031\001\001\000" +
    "\002\001\001\000\024\010\062\011\032\012\023\013\017" +
    "\014\033\015\020\016\025\017\016\020\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\101\001\001" +
    "\000\002\001\001\000\004\022\103\001\001\000\002\001" +
    "\001\000\024\010\105\011\032\012\023\013\017\014\033" +
    "\015\020\016\025\017\016\020\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\112\020\012\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /*
        Reporte de error encontrado.
    */
    public void report_error(String message, Object info) {
        StringBuilder sb = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                sb.append(" in line " + s.left);
            }
            if (s.right >= 0) {
                sb.append(", column " + s.right);
            }
        }
        sb.append(" : "+message);
        
        System.err.println(sb.toString());
    }

    /*
        Cuando se encuentra un error donde el sistema no puede recuperarse, se lanza un error fatal. Se despliega el mensaje de error y se finaliza la ejecucion.
    */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

    /*
        Metodo main para garantizar la ejecucion del analizador lexico y sintactico, ademas que se pase como parametro la tabla de simbolos correspondiente.
    */
    public static void exect(String file) {
        exect(new File(file));
    }
    
    public static void exect(File file) {
        try {
            SintacticAnalyzer asin = new SintacticAnalyzer(new LexicalAnalyzer( new FileReader(file)));
            Block result = (Block) asin.parse().value;
            result.doAction();
        } catch (Exception ex) {
            logger.error(ex);
            System.exit(1);
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticAnalyzer$actions {
  private final SintacticAnalyzer parser;

  /** Constructor */
  CUP$SintacticAnalyzer$actions(SintacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticAnalyzer$do_action(
    int                        CUP$SintacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SintacticAnalyzer$parser,
    java.util.Stack            CUP$SintacticAnalyzer$stack,
    int                        CUP$SintacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SintacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = new Identifier((String) id.getValue());
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(14/*identifier*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // constant ::= DIGITO 
            {
              Digit RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = new Digit((Integer) d.getValue());
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(16/*constant*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= identifier 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = id;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= constant 
            {
              Expression RESULT = null;
		int consleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Digit cons = (Digit)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = cons;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= PIZQ expression PDER 
            {
              Expression RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		
                              RESULT = ex;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression OP_DIV expression 
            {
              Expression RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Token div = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Expression ex2 = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = new ArithmeticOperation(ex1, ex2, OperationType.DIV);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression OP_MULT expression 
            {
              Expression RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Token mult = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Expression ex2 = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = new ArithmeticOperation(ex1, ex2, OperationType.MULT);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= expression OP_SUB expression 
            {
              Expression RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Token sub = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Expression ex2 = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = new ArithmeticOperation(ex1, ex2, OperationType.SUB);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= expression OP_ADD expression 
            {
              Expression RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int addleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int addright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Token add = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Expression ex2 = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = new ArithmeticOperation(ex1, ex2, OperationType.ADD);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // null_statement ::= NULL SEMI 
            {
              Statement RESULT = null;
		int nullStmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int nullStmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Token nullStm = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		
                              RESULT = new NullStm();
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(13/*null_statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // output_statement ::= OUTPUT PIZQ identifier PDER SEMI 
            {
              Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		
                              RESULT = new OutputStm(id);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(12/*output_statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-4)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // input_statement ::= INPUT PIZQ identifier PDER SEMI 
            {
              Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		
                              RESULT = new InputStm(id);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(11/*input_statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-4)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // for_statement ::= FOR identifier IN constant TO constant LOOP statements ENDLOOP 
            {
              Statement RESULT = null;
		int forStmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-8)).left;
		int forStmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-8)).right;
		Token forStm = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-7)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-7)).value;
		int cons1left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-5)).left;
		int cons1right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-5)).right;
		Digit cons1 = (Digit)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-5)).value;
		int cons2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).left;
		int cons2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).right;
		Digit cons2 = (Digit)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		StatementList stm = (StatementList)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		
                              RESULT = new ForStm(id, cons1, cons2, stm);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(9/*for_statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-8)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if_statement ::= IF expression THEN statements ELSE statements ENDIF 
            {
              Statement RESULT = null;
		int ifStmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-6)).left;
		int ifStmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-6)).right;
		Token ifStm = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-5)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-5)).value;
		int stm1left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).left;
		int stm1right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).right;
		StatementList stm1 = (StatementList)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).value;
		int stm2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int stm2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		StatementList stm2 = (StatementList)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		
                              RESULT = new IfStm(ex, stm1, stm2);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(10/*if_statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-6)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // assigment_statement ::= identifier EQUAL expression SEMI 
            {
              Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		Token eq = (Token)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		
                              RESULT = new AssigmentStm(id, ex);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(8/*assigment_statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= output_statement 
            {
              Statement RESULT = null;
		int ostmnleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int ostmnright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Statement ostmn = (Statement)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = ostmn;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= input_statement 
            {
              Statement RESULT = null;
		int instmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int instmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Statement instm = (Statement)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = instm;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= if_statement 
            {
              Statement RESULT = null;
		int istmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int istmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Statement istm = (Statement)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = istm;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= for_statement 
            {
              Statement RESULT = null;
		int fstmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int fstmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Statement fstm = (Statement)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = fstm;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= null_statement 
            {
              Statement RESULT = null;
		int nstmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int nstmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Statement nstm = (Statement)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = nstm;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= assigment_statement 
            {
              Statement RESULT = null;
		int astmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int astmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Statement astm = (Statement)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = astm;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statements ::= statement statements 
            {
              StatementList RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		StatementList stms = (StatementList)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              if (stms == null) {
                                stms = new StatementList();
                              }

                              stms.addElement(stm);

                              RESULT = stms;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(6/*statements*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statements ::= statement 
            {
              StatementList RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              StatementList stmList = new StatementList();

                              stmList.addElement(stm);

                              RESULT = stmList;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(6/*statements*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= BEGIN statements END SEMI 
            {
              Block RESULT = null;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		StatementList stms = (StatementList)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		
                              RESULT = new Block(stms);
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(5/*block*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= identifier TWOP INTEGER SEMI declarations 
            {
              Object RESULT = null;

              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(4/*declarations*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-4)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= identifier TWOP INTEGER SEMI 
            {
              Object RESULT = null;

              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(4/*declarations*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= declarations block 
            {
              Object RESULT = null;
		int blckleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int blckright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Block blck = (Block)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = blck;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(3/*body*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= identifier IS 
            {
              Object RESULT = null;

              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SintacticAnalyzer$parser.done_parsing();
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROCEDURE header body 
            {
              Object RESULT = null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right;
		Object bd = (Object)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).value;
		
                              RESULT = bd;
                            
              CUP$SintacticAnalyzer$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-0)).right, RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

